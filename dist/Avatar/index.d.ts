/// <reference types="react" />
import { Avatar, AvatarProps } from './Avatar';
import { Accessory, AccessoryProps } from './Avatar.Accessory';
declare const ThemedAvatar: (import("react").FunctionComponent<Pick<AvatarProps & Partial<import("../config").ThemeProps<AvatarProps>>, "source" | "size" | "containerStyle" | "onPress" | "Component" | "activeOpacity" | "onLongPress" | "title" | "titleStyle" | "icon" | "iconStyle" | "ImageComponent" | "placeholderStyle" | "overlayContainerStyle" | "imageProps" | "avatarStyle" | "rounded" | "renderPlaceholderContent">> & {
    Accessory: import("react").FunctionComponent<Pick<Partial<import("..").IconProps> & Partial<import("..").ImageProps> & {
        underlayColor?: import("react-native").ColorValue;
        style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
    } & Partial<import("../config").ThemeProps<AccessoryProps>>, "style" | "onLayout" | "onError" | "onLoad" | "onLoadEnd" | "onLoadStart" | "progressiveRenderingEnabled" | "borderRadius" | "borderTopLeftRadius" | "borderTopRightRadius" | "borderBottomLeftRadius" | "borderBottomRightRadius" | "resizeMode" | "resizeMethod" | "source" | "loadingIndicatorSource" | "testID" | "defaultSource" | "blurRadius" | "capInsets" | "onProgress" | "onPartialLoad" | "fadeDuration" | "width" | "height" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "size" | "containerStyle" | "onPress" | "Component" | "hitSlop" | "nativeID" | "hasTVPreferredFocus" | "tvParallaxProperties" | "activeOpacity" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "onLongPress" | "onPressIn" | "onPressOut" | "pressRetentionOffset" | "touchSoundDisabled" | "allowFontScaling" | "ellipsizeMode" | "lineBreakMode" | "numberOfLines" | "onTextLayout" | "maxFontSizeMultiplier" | "adjustsFontSizeToFit" | "minimumFontScale" | "suppressHighlighting" | "selectable" | "selectionColor" | "textBreakStrategy" | "dataDetectorType" | "solid" | "type" | "disabledStyle" | "raised" | "background" | "useForeground" | "color" | "iconStyle" | "backgroundColor" | "name" | "onHideUnderlay" | "onShowUnderlay" | "underlayColor" | "reverse" | "iconProps" | "reverseColor" | "brand" | "ImageComponent" | "PlaceholderContent" | "childrenContainerStyle" | "placeholderStyle" | "transition" | "transitionDuration">> | import("react").ForwardRefExoticComponent<Partial<import("..").IconProps> & Partial<import("..").ImageProps> & {
        underlayColor?: import("react-native").ColorValue;
        style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
    } & Partial<import("../config").ThemeProps<AccessoryProps>>>;
}) | (import("react").ForwardRefExoticComponent<AvatarProps & Partial<import("../config").ThemeProps<AvatarProps>>> & {
    Accessory: import("react").FunctionComponent<Pick<Partial<import("..").IconProps> & Partial<import("..").ImageProps> & {
        underlayColor?: import("react-native").ColorValue;
        style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
    } & Partial<import("../config").ThemeProps<AccessoryProps>>, "style" | "onLayout" | "onError" | "onLoad" | "onLoadEnd" | "onLoadStart" | "progressiveRenderingEnabled" | "borderRadius" | "borderTopLeftRadius" | "borderTopRightRadius" | "borderBottomLeftRadius" | "borderBottomRightRadius" | "resizeMode" | "resizeMethod" | "source" | "loadingIndicatorSource" | "testID" | "defaultSource" | "blurRadius" | "capInsets" | "onProgress" | "onPartialLoad" | "fadeDuration" | "width" | "height" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "size" | "containerStyle" | "onPress" | "Component" | "hitSlop" | "nativeID" | "hasTVPreferredFocus" | "tvParallaxProperties" | "activeOpacity" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "onLongPress" | "onPressIn" | "onPressOut" | "pressRetentionOffset" | "touchSoundDisabled" | "allowFontScaling" | "ellipsizeMode" | "lineBreakMode" | "numberOfLines" | "onTextLayout" | "maxFontSizeMultiplier" | "adjustsFontSizeToFit" | "minimumFontScale" | "suppressHighlighting" | "selectable" | "selectionColor" | "textBreakStrategy" | "dataDetectorType" | "solid" | "type" | "disabledStyle" | "raised" | "background" | "useForeground" | "color" | "iconStyle" | "backgroundColor" | "name" | "onHideUnderlay" | "onShowUnderlay" | "underlayColor" | "reverse" | "iconProps" | "reverseColor" | "brand" | "ImageComponent" | "PlaceholderContent" | "childrenContainerStyle" | "placeholderStyle" | "transition" | "transitionDuration">> | import("react").ForwardRefExoticComponent<Partial<import("..").IconProps> & Partial<import("..").ImageProps> & {
        underlayColor?: import("react-native").ColorValue;
        style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
    } & Partial<import("../config").ThemeProps<AccessoryProps>>>;
});
export { Avatar, Accessory };
export type { AccessoryProps, AvatarProps };
export default ThemedAvatar;
